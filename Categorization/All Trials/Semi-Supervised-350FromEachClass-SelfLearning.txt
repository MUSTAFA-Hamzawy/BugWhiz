
Model trained using n-gram range: (1, 1)
Cross-Validation Scores (SVM): [0.76190476 0.73809524 0.7047619  0.8        0.71428571]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.88      0.77      0.82      7437
     Backend       0.79      0.79      0.79      5799
    Security       0.28      0.98      0.44       367

    accuracy                           0.78     13603
   macro avg       0.65      0.85      0.68     13603
weighted avg       0.82      0.78      0.80     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5724      1208       505
Frontend       811      4579       409
Security         2         6       359
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.7837976916856576
Model trained using n-gram range: (1, 2)
Cross-Validation Scores (SVM): [0.73809524 0.75238095 0.71904762 0.8        0.74285714]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.88      0.78      0.83      7437
     Backend       0.80      0.81      0.80      5799
    Security       0.31      0.97      0.47       367

    accuracy                           0.80     13603
   macro avg       0.66      0.85      0.70     13603
weighted avg       0.83      0.80      0.81     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5827      1183       427
Frontend       768      4677       354
Security         2         9       356
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.798353304418143
Model trained using n-gram range: (1, 3)
Cross-Validation Scores (SVM): [0.73809524 0.75714286 0.72380952 0.8        0.72857143]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.89      0.78      0.83      7437
     Backend       0.80      0.80      0.80      5799
    Security       0.28      0.97      0.44       367

    accuracy                           0.79     13603
   macro avg       0.66      0.85      0.69     13603
weighted avg       0.83      0.79      0.81     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5790      1156       491
Frontend       743      4647       409
Security         3         8       356
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.793427920311696
Model trained using n-gram range: (1, 4)
Cross-Validation Scores (SVM): [0.73333333 0.75238095 0.72380952 0.78571429 0.73333333]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.89      0.78      0.83      7437
     Backend       0.80      0.79      0.80      5799
    Security       0.27      0.97      0.43       367

    accuracy                           0.79     13603
   macro avg       0.65      0.85      0.68     13603
weighted avg       0.83      0.79      0.81     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5803      1130       504
Frontend       748      4605       446
Security         2         8       357
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.7913695508343748
Model trained using n-gram range: (1, 5)
Cross-Validation Scores (SVM): [0.71904762 0.75238095 0.72380952 0.78095238 0.73333333]
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-35-0d0ccc45d8bb> in <cell line: 24>()
     47 
     48     # Combine the labeled and pseudo-labeled data
---> 49     labeled_data = pd.DataFrame(data.todense(), columns=vectorizer.get_feature_names_out())
     50     X_combined = pd.concat([labeled_data, X_unlabeled_filtered_df])
     51     y_combined = np.hstack((sampled_data['class_name'], pseudo_labels_filtered))

1 frames
/usr/local/lib/python3.10/dist-packages/scipy/sparse/_compressed.py in toarray(self, order, out)
   1059             y = out.T
   1060         M, N = x._swap(x.shape)
-> 1061         csr_todense(M, N, x.indptr, x.indices, x.data, y)
   1062         return out
   1063 

KeyboardInterrupt: 












*//////////////////////////////////////////////

from sklearn.semi_supervised import LabelPropagation
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score
from sklearn.feature_extraction.text import TfidfVectorizer
import pandas as pd
import numpy as np

# Initialize the SVM model
svm_model = SVC(C=100, probability=True)

# Initialize the LabelPropagation model
label_prop_model = LabelPropagation()

# Initialize a DataFrame to store the sampled data
sampled_data = pd.DataFrame(columns=['bug_description', 'class_name'])

# Sample 100 samples from each class
for class_name in filtered_train_df['class_name'].unique():
    class_samples = filtered_train_df[filtered_train_df['class_name'] == class_name].sample(n=350, random_state=42)
    sampled_data = pd.concat([sampled_data, class_samples])

# Iterate over each combination of transformed data and vectorizer
for data, vectorizer in transformed_data:
    print(f"Model trained using n-gram range: {vectorizer.ngram_range}")

    # Perform cross-validation to evaluate the SVM model
    scores = cross_val_score(svm_model, data, sampled_data['class_name'], cv=5)
    print(f"Cross-Validation Scores (SVM): {scores}")

    # Fit the SVM model on the entire training data
    svm_model.fit(data, sampled_data['class_name'])

    # Predict the class labels and probabilities for the unlabeled data
    X_unlabeled = vectorizer.transform(filtered_train_df['bug_description'])
    pseudo_labels = svm_model.predict(X_unlabeled)
    pseudo_proba = svm_model.predict_proba(X_unlabeled)

    # Filter high-confidence predictions
    threshold = 0.9
    high_confidence_indices = np.max(pseudo_proba, axis=1) > threshold
    X_unlabeled_filtered = X_unlabeled[high_confidence_indices]
    pseudo_labels_filtered = pseudo_labels[high_confidence_indices]

    # Convert the sparse matrix X_unlabeled_filtered to a DataFrame
    X_unlabeled_filtered_df = pd.DataFrame(X_unlabeled_filtered.toarray(), columns=vectorizer.get_feature_names_out())

    # Combine the labeled and pseudo-labeled data
    labeled_data = pd.DataFrame(data.todense(), columns=vectorizer.get_feature_names_out())
    X_combined = pd.concat([labeled_data, X_unlabeled_filtered_df])
    y_combined = np.hstack((sampled_data['class_name'], pseudo_labels_filtered))

    # Train the LabelPropagation model on the combined data
    label_prop_model.fit(X_combined, y_combined)

    # Evaluate the LabelPropagation model on the labeled test data
    X_test_transformed = vectorizer.transform(filtered_train_df['bug_description'])
    y_pred = label_prop_model.predict(X_test_transformed)

    # Print the classification report
    print(classification_report(filtered_train_df['class_name'], y_pred, target_names=filtered_train_df['class_name'].unique()))

    # Print the confusion matrix
    print(pd.crosstab(filtered_train_df['class_name'], y_pred, rownames=['Actual'], colnames=['Predicted']))

    # Print the accuracy
    accuracy = label_prop_model.score(X_test_transformed, filtered_train_df['class_name'])
    print(f"Accuracy (LabelPropagation): {accuracy}")
