Model trained using n-gram range: (1, 1)
Cross-Validation Scores (SVM): [0.76190476 0.73809524 0.7047619  0.8        0.71428571]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.89      0.76      0.82      7437
     Backend       0.79      0.80      0.79      5799
    Security       0.25      0.98      0.40       367

    accuracy                           0.78     13603
   macro avg       0.64      0.85      0.67     13603
weighted avg       0.83      0.78      0.80     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5646      1218       573
Frontend       684      4614       501
Security         2         4       361
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.7807836506652944
Model trained using n-gram range: (1, 2)
Cross-Validation Scores (SVM): [0.73809524 0.75238095 0.71904762 0.8        0.74285714]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.90      0.76      0.82      7437
     Backend       0.80      0.80      0.80      5799
    Security       0.25      0.98      0.40       367

    accuracy                           0.78     13603
   macro avg       0.65      0.85      0.67     13603
weighted avg       0.84      0.78      0.80     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5666      1184       587
Frontend       661      4650       488
Security         3         4       360
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.7848268764243181
Model trained using n-gram range: (1, 3)
Cross-Validation Scores (SVM): [0.73809524 0.75714286 0.72380952 0.8        0.72857143]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.90      0.76      0.82      7437
     Backend       0.80      0.80      0.80      5799
    Security       0.24      0.98      0.38       367

    accuracy                           0.78     13603
   macro avg       0.64      0.85      0.67     13603
weighted avg       0.84      0.78      0.80     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5624      1185       628
Frontend       636      4629       534
Security         3         4       360
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.7801955451003455
Model trained using n-gram range: (1, 4)
Cross-Validation Scores (SVM): [0.73333333 0.75238095 0.72380952 0.78571429 0.73333333]
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
              precision    recall  f1-score   support

    Frontend       0.90      0.75      0.82      7437
     Backend       0.79      0.79      0.79      5799
    Security       0.23      0.98      0.37       367

    accuracy                           0.78     13603
   macro avg       0.64      0.84      0.66     13603
weighted avg       0.83      0.78      0.80     13603

Predicted  Backend  Frontend  Security
Actual                                
Backend       5597      1202       638
Frontend       634      4607       558
Security         3         4       360
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LabelPropagation was fitted with feature names
  warnings.warn(
Accuracy (LabelPropagation): 0.7765933985150334
Model trained using n-gram range: (1, 5)
Cross-Validation Scores (SVM): [0.71904762 0.75238095 0.72380952 0.78095238 0.73333333]


/////////////////////


from sklearn.semi_supervised import LabelPropagation
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import make_pipeline
import pandas as pd
from scipy.sparse import csr_matrix

# Initialize the SVM model
svm_model = SVC(C=100)

# Initialize the LabelPropagation model
label_prop_model = LabelPropagation()

# Initialize a DataFrame to store the sampled data
sampled_data = pd.DataFrame(columns=['bug_description', 'class_name'])

# Sample 100 samples from each class
for class_name in filtered_train_df['class_name'].unique():
    class_samples = filtered_train_df[filtered_train_df['class_name'] == class_name].sample(n=100, random_state=42)
    sampled_data = sampled_data.append(class_samples)

# Iterate over each combination of transformed data and vectorizer
for data, vectorizer in transformed_data:
    print(f"Model trained using n-gram range: {vectorizer.ngram_range}")

    # Perform cross-validation to evaluate the SVM model
    scores = cross_val_score(svm_model, data, sampled_data['class_name'], cv=5)
    print(f"Cross-Validation Scores (SVM): {scores}")

    # Fit the SVM model on the entire training data
    svm_model.fit(data, sampled_data['class_name'])

    # Predict the class labels for the unlabeled data
    X_unlabeled = vectorizer.transform(filtered_train_df['bug_description'])
    pseudo_labels = svm_model.predict(X_unlabeled)

    # Combine the labeled and pseudo-labeled data
    labeled_data = pd.DataFrame(data.todense(), columns=vectorizer.get_feature_names_out())
    unlabeled_data = pd.DataFrame(X_unlabeled.todense(), columns=vectorizer.get_feature_names_out())
    X_combined = pd.concat([labeled_data, unlabeled_data])
    y_combined = np.hstack((sampled_data['class_name'], pseudo_labels))

    # Train the LabelPropagation model on the combined data
    label_prop_model.fit(X_combined, y_combined)

    # Evaluate the LabelPropagation model on the labeled test data
    X_test_transformed = vectorizer.transform(filtered_train_df['bug_description'])
    y_pred = label_prop_model.predict(X_test_transformed)

    # Print the classification report
    print(classification_report(filtered_train_df['class_name'], y_pred, target_names=filtered_train_df['class_name'].unique()))

    # Print the confusion matrix
    print(pd.crosstab(filtered_train_df['class_name'], y_pred, rownames=['Actual'], colnames=['Predicted']))

    # Print the accuracy
    accuracy = label_prop_model.score(X_test_transformed, filtered_train_df['class_name'])
    print(f"Accuracy (LabelPropagation): {accuracy}")
